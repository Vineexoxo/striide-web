name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  # deploy_backend:
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Pull Backend Docker Image
  #     - name: Pull Backend Docker Image
  #       run: sudo docker pull vineexoxo/striide-backend:latest

  #     # Step 2: Delete old Backend Docker Container (if exists)
  #     - name: Delete old Backend Docker Container
  #       run: sudo docker rm -f striide-backend-container || true

  #     # Step 3: Run Backend Docker Container
  #     - name: Run Backend Docker Container
  #       env:
  #         ROCKET_DATABASES: ${{ secrets.ROCKET_DATABASES }}
  #         ENV: ${{ secrets.ENV }}
  #         XATA_API_KEY: ${{ secrets.XATA_API_KEY }}
  #       run: |
  #         sudo docker run -d \
  #           --name striide-backend-container \
  #           -e ROCKET_DATABASES='{postgres={url="postgresql://cb2s42:xau_1d9LHuNg9qIh0dpuA14x1URryIQ5soOr3@us-east-1.sql.xata.sh/striide:main?sslmode=require", max_connections=1024}}' \
  #           -e ENV=$ENV \
  #           -e XATA_API_KEY=$XATA_API_KEY \
  #           -p 8000:8080 \
  #           vineexoxo/striide-backend:latest

  #     # Step 4: Clean up Docker images (optional)
  #     - name: Clean up Docker images
  #       run: sudo docker image prune -f
  deploy_frontend_to_kubernetes:
    runs-on: ubuntu-latest

    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      - name: Start Minikube
        run: |
          minikube start --driver=docker

      - name: Apply Kubernetes Deployment for Frontend
        run: |
          kubectl apply -f ./frontend-deployment.yml
          kubectl apply -f ./frontend-service.yml

      - name: Verify Deployment
        run: kubectl get pods

      - name: Get Minikube Service URL
        run: |
          minikube service striide-frontend --url
  # deploy_frontend:
  #   needs: deploy_backend
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Pull Frontend Docker Image
  #     - name: Pull Frontend Docker Image
  #       run: sudo docker pull vineexoxo/striide-frontend:latest

  #     # Step 2: Delete old Frontend Docker Container (if exists)
  #     - name: Delete old Frontend Docker Container
  #       run: sudo docker rm -f striide-frontend-container || true

  #     # Step 3: Run Frontend Docker Container
  #     - name: Run frontend Docker container
  #       env:
  #         NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.NEXT_PUBLIC_MAPBOX_TOKEN }}
  #         NEXT_PUBLIC_MAPBOX_MAP_STYLE: ${{ secrets.NEXT_PUBLIC_MAPBOX_MAP_STYLE }}
  #         NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  #         NEXT_PUBLIC_SEARCH_API_SESSION_TOKEN: ${{ secrets.NEXT_PUBLIC_SEARCH_API_SESSION_TOKEN }}
  #         NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
  #       run: |
  #         sudo docker run -d \
  #           --name striide-frontend-container \
  #           -e NEXT_PUBLIC_MAPBOX_TOKEN=$NEXT_PUBLIC_MAPBOX_TOKEN \
  #           -e NEXT_PUBLIC_MAPBOX_MAP_STYLE=$NEXT_PUBLIC_MAPBOX_MAP_STYLE \
  #           -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
  #           -e NEXT_PUBLIC_SEARCH_API_SESSION_TOKEN=$NEXT_PUBLIC_SEARCH_API_SESSION_TOKEN \
  #           -e NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL \
  #           -p 3000:3000 \
  #           vineexoxo/striide-frontend:latest

  #     # Step 4: Clean up Docker images 
  #     - name: Clean up Docker images
  #       run: sudo docker image prune -f

  # start_ELK_STACK:
  #   needs:
  #     - deploy_frontend
  #     - deploy_backend
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Checkout repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     # Step 2: Set up Docker
  #     - name: Set up Docker
  #       uses: docker/setup-buildx-action@v2

  #     # Step 3: Run Ansible playbook with inventory file for dockercompose
  #     - name: Run Ansible playbook to set up ELK stack
  #       run: |
  #         ansible-playbook -i inventory.ini playbook.yml

      # Step 4: Pull and start the ELK stack using Docker Compose
      # - name: Start ELK stack
      #   run: |
      #     docker-compose -f ./docker-compose.yml up -d
